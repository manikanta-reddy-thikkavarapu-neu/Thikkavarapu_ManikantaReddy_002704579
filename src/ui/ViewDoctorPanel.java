/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author manikantareddythikkavarapu
 */
public class ViewDoctorPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewDoctorPanel
     */
    Person person;
    PatientDirectory patientDirectory;
    PersonDirectory personDirectory;

    public ViewDoctorPanel(Person person, PatientDirectory patientDirectory, PersonDirectory personDirectory) {
        initComponents();
        this.person = person;
        this.patientDirectory = patientDirectory;
        this.personDirectory = personDirectory;
        constructDoctorPatients();
        setDoctorProfileData();
    }

    public void constructDoctorPatients() {
        for (Person p : personDirectory.getPersonList()) {
            if ((p.getRoleType() == "Patient") && (p.getHouse().getCommunity()).equals(this.person.getHouse().getCommunity())) {
                jComboBox1.addItem(p.getFirstName() + " " + p.getLastName());
            }
        }
        if (jComboBox1.getSelectedItem() != null) {
            onChangeComboBox();
            getPatientData(jComboBox1.getSelectedItem().toString());
        }
        else {
           JOptionPane.showMessageDialog(this, "No patients available to enter their encounter details");
        }
    }

    public void setDoctorProfileData() {
        txtDoctorNameValue.setText(this.person.getFirstName() + " " + this.person.getLastName());
        txtCommunityNameValue.setText(this.person.getHouse().getCommunity());
    }

    public void onChangeComboBox() {
        jComboBox1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                getPatientData(jComboBox1.getSelectedItem().toString());
            }
        });
    }

    public void getPatientData(String selectedPatient) {

        Patient patientObj = new Patient();

        for (Patient pa : patientDirectory.getPatients()) {
            if (pa.getName().equals(selectedPatient)) {
                patientObj = pa;
                break;
            }
        }

        populateEncounterTable(patientObj);
    }

    public void populateEncounterTable(Patient patient) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        ArrayList<Encounter> encounterList;

        encounterList = patient.getEncounterHistory().getEncounters();

        for (Encounter enc : encounterList) {
            Object[] row = new Object[7];
            row[0] = patient;
            row[1] = enc.getEncounterId();
            row[2] = enc.getDate();
            row[3] = enc.getVitalSigns().getHeartRate();
            row[4] = enc.getVitalSigns().getBloodPressure();
            row[5] = enc.getVitalSigns().getTemperature();
            row[6] = enc.getVitalSigns().getWeight();

            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDoctorNameValue = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCommunityNameValue = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        view = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Doctor Admin");

        jLabel2.setText("Doctor name :");

        txtDoctorNameValue.setText("NA");

        jLabel3.setText("Community name :");

        txtCommunityNameValue.setText("NA");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Encounter Id", "Encounter Date", "Heart Rate", "Blood Pressure", "Temperature", "Weight"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 317, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(310, 310, 310))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDoctorNameValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCommunityNameValue)
                        .addGap(45, 45, 45))))
            .addGroup(layout.createSequentialGroup()
                .addGap(282, 282, 282)
                .addComponent(view)
                .addGap(18, 18, 18)
                .addComponent(delete)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDoctorNameValue)
                    .addComponent(jLabel3)
                    .addComponent(txtCommunityNameValue))
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(view)
                    .addComponent(delete))
                .addContainerGap(193, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        DoctorJFrame.setCreateDoctorPanel(person, patientDirectory, (Patient) model.getValueAt(selectedRowIndex, 0), selectedRowIndex);
    }//GEN-LAST:event_viewActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        patientDirectory.deletePatientEncounter((Patient) model.getValueAt(selectedRowIndex, 0), selectedRowIndex);
        JOptionPane.showMessageDialog(this, "Patient encounter deleted");
        getPatientData(jComboBox1.getSelectedItem().toString());
        DoctorJFrame.refreshCreateDoctorPanel(person, patientDirectory);
    }//GEN-LAST:event_deleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel txtCommunityNameValue;
    private javax.swing.JLabel txtDoctorNameValue;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
}
